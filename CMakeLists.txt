cmake_minimum_required(VERSION 3.22)
set(NAME_PROJECT SouthPass)
project(${NAME_PROJECT} C CXX)
#set(CMAKE_C_STANDARD 17)

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(CMAKE_C_COMPILER "C:/mingw64/bin/gcc.exe")
    set(MSYS2_PATH "C:/msys64")
    set(INCLUDE_DIRECTORIES "C:/mingw64/include")
    set(LINK_DIRECTORIES "C:/mingw64/lib")
    set(MSYS_INCLUDE_DIRECTORIES ${MSYS2_PATH}/mingw64/include)
    set(MSYS_LINK_DIRECTORIES ${MSYS2_PATH}/mingw64/lib)
    set(GTK_INCLUDE_DIR ${MSYS2_PATH}/mingw64/include/gtk-4.0)
    set(GLIB_CONFIG_DIR ${MSYS2_PATH}/mingw64/lib/glib-2.0/include)

    include_directories(INCLUDE_DIRECTORIES)
    include_directories(${MSYS_INCLUDE_DIRECTORIES})
    include_directories(${GTK_INCLUDE_DIR})
    link_directories(LINK_DIRECTORIES)
    link_directories(${MSYS_LINK_DIRECTORIES})
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CMAKE_C_COMPILER "/usr/bin/g++")
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
endif()

set(HEADER_FILES "./includes/db.h")
file(GLOB HEADERS_FILES "./includes/*.h")

file(GLOB C_SOURCES "src/*.c")
file(GLOB CPP_SOURCES "src/*.cpp")
file(GLOB SUB_CPP "src/*/*.cpp")
file(GLOB SUB_C "src/*/*.c")

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    file(GLOB LIB_INCLUDE_DIRS ${MSYS2_PATH}/mingw64/include/*)
    file(GLOB LIB_CONFIG_INCLUDE_DIRS ${MSYS2_PATH}/mingw64/lib/*/include)
    add_executable(app ${C_SOURCES} ${CPP_SOURCES} ${SUB_CPP} ${SUB_C} ${HEADERS_FILES} icon/app.o)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    include_directories("./includes")
    add_executable(app ${C_SOURCES} ${CPP_SOURCES} ${SUB_CPP} ${SUB_C} ${HEADERS_FILES} includes/icon_data.h)
    target_include_directories(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ./includes)
endif()

#set_target_properties(app PROPERTIES WIN32_EXECUTABLE TRUE)

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    foreach(INCLUDE_DIR ${LIB_INCLUDE_DIRS})
        if (IS_DIRECTORY ${INCLUDE_DIR}) 
            target_include_directories(app PRIVATE ${INCLUDE_DIR})
        endif()
    endforeach()

    foreach(INCLUDE_DIR ${LIB_CONFIG_INCLUDE_DIRS})
        if (IS_DIRECTORY ${INCLUDE_DIR}) 
            target_include_directories(app PRIVATE ${INCLUDE_DIR})
        endif()
    endforeach()
    
    file(GLOB LIBS_DLL ${CMAKE_CURRENT_SOURCE_DIR}/libs/*.dll)
    target_link_libraries(app ${LIBS_DLL})
endif()

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(LIBMYSQLCLIENT REQUIRED mysqlclient)
    find_package(CURL REQUIRED)
    pkg_check_modules(GTK REQUIRED gtk4)

    add_definitions(-DQT_NO_KEYWORDS)
    find_package(Qt6 COMPONENTS Widgets REQUIRED)
    include_directories(${Qt6Core_INCLUDE_DIRS} ${Qt6Widgets_INCLUDE_DIRS})
    target_link_libraries(app PRIVATE Qt6::Core Qt6::Widgets)

    foreach(FLAG ${LIBMYSQLCLIENT_CFLAGS_OTHER})
       set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FLAG}")
    endforeach()

    link_directories(${LIBMYSQLCLIENT_LIBRARY_DIRS})

    target_include_directories(app PRIVATE ${GTK_INCLUDE_DIRS})
    target_link_libraries(app PRIVATE ${GTK_LIBRARIES})
    target_compile_options(app PRIVATE ${GTK_CFLAGS_OTHER})

    target_include_directories(app PRIVATE ${LIBMYSQLCLIENT_INCLUDE_DIRS})
    target_link_libraries(app PRIVATE ${LIBMYSQLCLIENT_LIBRARIES})

    target_include_directories(app PRIVATE ${CURL_INCLUDE_DIRS})
    target_link_libraries(app PRIVATE ${CURL_LIBRARIES})
endif()